#!/usr/bin/env python3
"""
Script de teste para a API de Clientes
Execute este script para testar todos os endpoints da API
"""

import requests
import json
import time

# Configura√ß√£o da API
BASE_URL = "http://localhost:8000"
API_URL = f"{BASE_URL}/clientes"

def print_separator(title):
    print(f"\n{'='*50}")
    print(f" {title}")
    print(f"{'='*50}")

def print_response(response, title):
    print(f"\n--- {title} ---")
    print(f"Status: {response.status_code}")
    print(f"Headers: {dict(response.headers)}")
    try:
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    except:
        print(f"Response: {response.text}")

def test_health_check():
    """Testa o endpoint de health check"""
    print_separator("HEALTH CHECK")
    
    try:
        response = requests.get(f"{BASE_URL}/health")
        print_response(response, "Health Check")
        return response.status_code == 200
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar √† API. Certifique-se de que ela est√° rodando.")
        return False

def test_create_cliente():
    """Testa a cria√ß√£o de clientes"""
    print_separator("CRIAR CLIENTES")
    
    clientes_teste = [
        {
            "nome": "Jo√£o Silva Santos",
            "email": "joao.silva@email.com",
            "cpf_cnpj": "12345678901"
        },
        {
            "nome": "Maria Oliveira",
            "email": "maria.oliveira@email.com",
            "cpf_cnpj": "98765432100"
        },
        {
            "nome": "Empresa ABC Ltda",
            "email": "contato@empresaabc.com",
            "cpf_cnpj": "12345678000199"
        }
    ]
    
    clientes_criados = []
    
    for i, cliente in enumerate(clientes_teste, 1):
        print(f"\nCriando cliente {i}: {cliente['nome']}")
        
        try:
            response = requests.post(API_URL, json=cliente)
            print_response(response, f"Cliente {i} criado")
            
            if response.status_code == 201:
                clientes_criados.append(response.json())
                print(f"‚úÖ Cliente {i} criado com sucesso!")
            else:
                print(f"‚ùå Falha ao criar cliente {i}")
                
        except Exception as e:
            print(f"‚ùå Erro ao criar cliente {i}: {e}")
    
    return clientes_criados

def test_list_clientes():
    """Testa a listagem de clientes"""
    print_separator("LISTAR CLIENTES")
    
    try:
        response = requests.get(API_URL)
        print_response(response, "Listar Clientes")
        
        if response.status_code == 200:
            clientes = response.json()
            print(f"‚úÖ Total de clientes: {len(clientes)}")
            return clientes
        else:
            print("‚ùå Falha ao listar clientes")
            return []
            
    except Exception as e:
        print(f"‚ùå Erro ao listar clientes: {e}")
        return []

def test_get_cliente_by_id(cliente_id):
    """Testa a obten√ß√£o de um cliente espec√≠fico"""
    print_separator(f"OBTER CLIENTE ID {cliente_id}")
    
    try:
        response = requests.get(f"{API_URL}/{cliente_id}")
        print_response(response, f"Cliente ID {cliente_id}")
        
        if response.status_code == 200:
            print(f"‚úÖ Cliente ID {cliente_id} obtido com sucesso!")
            return response.json()
        else:
            print(f"‚ùå Falha ao obter cliente ID {cliente_id}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao obter cliente ID {cliente_id}: {e}")
        return None

def test_update_cliente(cliente_id, dados_atualizacao):
    """Testa a atualiza√ß√£o de um cliente"""
    print_separator(f"ATUALIZAR CLIENTE ID {cliente_id}")
    
    try:
        response = requests.put(f"{API_URL}/{cliente_id}", json=dados_atualizacao)
        print_response(response, f"Cliente ID {cliente_id} atualizado")
        
        if response.status_code == 200:
            print(f"‚úÖ Cliente ID {cliente_id} atualizado com sucesso!")
            return response.json()
        else:
            print(f"‚ùå Falha ao atualizar cliente ID {cliente_id}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao atualizar cliente ID {cliente_id}: {e}")
        return None

def test_delete_cliente(cliente_id):
    """Testa a exclus√£o de um cliente"""
    print_separator(f"DELETAR CLIENTE ID {cliente_id}")
    
    try:
        response = requests.delete(f"{API_URL}/{cliente_id}")
        print_response(response, f"Cliente ID {cliente_id} deletado")
        
        if response.status_code == 204:
            print(f"‚úÖ Cliente ID {cliente_id} deletado com sucesso!")
            return True
        else:
            print(f"‚ùå Falha ao deletar cliente ID {cliente_id}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao deletar cliente ID {cliente_id}: {e}")
        return False

def test_validation_errors():
    """Testa cen√°rios de valida√ß√£o de erro"""
    print_separator("TESTES DE VALIDA√á√ÉO")
    
    # Teste 1: CPF inv√°lido
    print("\n--- Teste: CPF inv√°lido ---")
    try:
        response = requests.post(API_URL, json={
            "nome": "Teste CPF",
            "email": "teste@email.com",
            "cpf_cnpj": "12345678900"  # CPF inv√°lido
        })
        print_response(response, "CPF inv√°lido")
        
        if response.status_code == 422:
            print("‚úÖ Valida√ß√£o de CPF funcionando corretamente!")
        else:
            print("‚ùå Valida√ß√£o de CPF n√£o funcionou como esperado")
            
    except Exception as e:
        print(f"‚ùå Erro no teste de CPF: {e}")
    
    # Teste 2: Email duplicado
    print("\n--- Teste: Email duplicado ---")
    try:
        response = requests.post(API_URL, json={
            "nome": "Teste Duplicado",
            "email": "joao.silva@email.com",  # Email j√° existente
            "cpf_cnpj": "11122233344"
        })
        print_response(response, "Email duplicado")
        
        if response.status_code == 400:
            print("‚úÖ Valida√ß√£o de email duplicado funcionando!")
        else:
            print("‚ùå Valida√ß√£o de email duplicado n√£o funcionou como esperado")
            
    except Exception as e:
        print(f"‚ùå Erro no teste de email duplicado: {e}")
    
    # Teste 3: Nome muito curto
    print("\n--- Teste: Nome muito curto ---")
    try:
        response = requests.post(API_URL, json={
            "nome": "A",  # Nome muito curto
            "email": "teste@email.com",
            "cpf_cnpj": "11122233344"
        })
        print_response(response, "Nome muito curto")
        
        if response.status_code == 422:
            print("‚úÖ Valida√ß√£o de nome funcionando!")
        else:
            print("‚ùå Valida√ß√£o de nome n√£o funcionou como esperado")
            
    except Exception as e:
        print(f"‚ùå Erro no teste de nome: {e}")

def main():
    """Fun√ß√£o principal que executa todos os testes"""
    print("üöÄ INICIANDO TESTES DA API DE CLIENTES")
    print(f"üåê URL da API: {BASE_URL}")
    
    # Teste 1: Health Check
    if not test_health_check():
        print("\n‚ùå API n√£o est√° dispon√≠vel. Encerrando testes.")
        return
    
    # Teste 2: Criar clientes
    clientes_criados = test_create_cliente()
    
    if not clientes_criados:
        print("\n‚ùå Nenhum cliente foi criado. Encerrando testes.")
        return
    
    # Teste 3: Listar clientes
    clientes_listados = test_list_clientes()
    
    # Teste 4: Obter cliente espec√≠fico
    if clientes_criados:
        primeiro_cliente = clientes_criados[0]
        cliente_obtido = test_get_cliente_by_id(primeiro_cliente['id'])
    
    # Teste 5: Atualizar cliente
    if clientes_criados:
        primeiro_cliente = clientes_criados[0]
        cliente_atualizado = test_update_cliente(
            primeiro_cliente['id'],
            {"nome": f"{primeiro_cliente['nome']} - ATUALIZADO"}
        )
    
    # Teste 6: Testes de valida√ß√£o
    test_validation_errors()
    
    # Teste 7: Deletar cliente
    if clientes_criados:
        primeiro_cliente = clientes_criados[0]
        sucesso_delete = test_delete_cliente(primeiro_cliente['id'])
    
    # Verifica√ß√£o final
    print_separator("VERIFICA√á√ÉO FINAL")
    clientes_finais = test_list_clientes()
    
    print(f"\nüéØ RESUMO DOS TESTES:")
    print(f"‚úÖ Clientes criados: {len(clientes_criados)}")
    print(f"‚úÖ Clientes finais: {len(clientes_finais)}")
    
    if len(clientes_finais) == len(clientes_criados) - 1:
        print("‚úÖ Teste de exclus√£o funcionou corretamente!")
    else:
        print("‚ùå Teste de exclus√£o n√£o funcionou como esperado!")
    
    print("\nüéâ Testes conclu√≠dos!")

if __name__ == "__main__":
    main()
